################################# MODELO SEIR ####################################
library(deSolve)
options(scipen = 999)

seir_model = function (current_timepoint, state_values, parameters)
{
# SE CREAN LAS VARIABLES 
  S = state_values [1]        # susceptibles
  E = state_values [2]        # expuestos 
  I = state_values [3]        # infectados
  R = state_values [4]        # removidos/recuperados
  
  with ( 
    as.list (parameters),     # para usar nombres de las variables dentro de los parametros
    {

 # SE CALCULA LAS DERIVDAS
      dS = (-beta * S * I)
      dE = (beta * S * I) - (delta * E)
      dI = (delta * E) - (gamma * I)
      dR = (gamma * I)
     

# SE COMBINA LOS RESULTADOS
      results = c (dS, dE, dI, dR)
      list (results)
    }
  )
}

# SE ESTABLECEN LOS PAR?METROS
contact_rate = 30                     # numero de contactos por d?a
transmission_probability = 0.03      # probabilidad de transmision
infectious_period = 7.5               # periodo de infeccion segun UMSA
latent_period = 6                     # periodo de latencia segun UMSA

# SE CALCULA LOS VALORES DE BETA (TASA DE TRANSMISI?N) Y GAMA (TASA DE RECUPERACION).

beta_value = contact_rate * transmission_probability
gamma_value = 1 / infectious_period
delta_value = 1 / latent_period

# SE CALCULA RO, QUE ES EL NUMERO DE REPRODUCCI?N

Ro = beta_value / gamma_value
Ro
# SE ESTABLECEN LOS PAR?METROS DIN?MICOS DE INICIO DE LA ENFERMEDAD

parameter_list = c (beta = beta_value, gamma = gamma_value, delta = delta_value)


W = 11501897          # susceptibles 
X = 3                 # infectados
Y = 0                 # removidos
Z = 90               # expuestos

# SE CALCULA EL TOTAL DE LA POBLACION

N = W + X + Y + Z

# SE ESTABLECEN LOS VALORES DE ESTADO INICIALES PARA LAS ECUACIONES DIFERENCIALES

initial_values = c (S = W/N, E = X/N, I = Y/N, R = Z/N)

# SE ESTABLECEN LOS TIEMPOS DE SALIDA

timepoints = seq (0, 180, by=1)

# SE SIMULA LA EPIDEMIA

output = lsoda (initial_values, timepoints, seir_model, parameter_list)
output %<>%  as.data.frame()
options(scipen = 999)
view(output)
# PARA QUE EL RESULTADO SEA EN N?MERO DE PERSONAS Y NO EN %
output2 = output*W
view(output2)

# QUITAR NOTACI?N EXPONENCIAL
options(scipen=999)

# SE GRAFICA L DIN?MICA DE LA SUBPOBLACI?N DE SUSCEPTIBLES 
plot (S ~ time, data = output, type='b', col = 'blue')  

# SE GRAFICA L DIN?MICA DE LA SUBPOBLACI?N DE EXPUESTOS
plot (E ~ time, data = output, type='b', col = 'orange')  

# SE GRAFICA L DIN?MICA DE LA SUBPOBLACI?N DE INFECTADOS
plot (I ~ time, data = output, type='b', col = 'red') 

# SE GRAFICA L DIN?MICA DE LA SUBPOBLACI?N DE RECUPERADOS
plot (R ~ time, data = output, type='b', col = 'green')  


# SE PONE TODO EN UN MISMO GRAFICO

plot (S ~ time, data = output, type='b', ylim = c(0,1), col = 'blue', ylab = 'S, E, I, R', main = 'SEIR epidemic') 
par (new = TRUE)    
plot (E ~ time, data = output, type='b', ylim = c(0,1), col = 'orange', ylab = '', axes = FALSE)
par (new = TRUE) 
plot (I ~ time, data = output, type='b', ylim = c(0,1), col = 'red', ylab = '', axes = FALSE) 
par (new = TRUE)  
plot (R ~ time, data = output, type='b', ylim = c(0,1), col = 'green', ylab = '', axes = FALSE)